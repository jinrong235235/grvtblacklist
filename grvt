// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

contract MyContract {
    struct Node {
        uint256 value;
        Node next;
    }

    mapping(address => bool) private blacklist;
    Node private head;

    function addNode(uint256 value) public {
        Node memory newNode = Node(value, head);
        head = newNode;
    }

    function deleteNode(uint256 value) public {
        Node memory current = head;
        Node memory previous = Node(0, address(0));

        while (current.next != address(0)) {
            if (current.value == value) {
                if (previous.value == 0) {
                    head = current.next;
                } else {
                    previous.next = current.next;
                }
                return;
            }
            previous = current;
            current = current.next;
        }
    }

    function findNode(uint256 value) public view returns (bool) { 
        Node memory current = head;

        while (current.next != address(0)) {
            if (current.value == value) {
                return true;
            }
            current = current.next;
        }

        return false;
    }

    function addToBlacklist(address user) public {
        blacklist[user] = true;
    }

    function removeFromBlacklist(address user) public {
        blacklist[user] = false;
    }

    function isBlacklisted(address user) public view returns (bool) {
        return blacklist[user];
    }
}
 
